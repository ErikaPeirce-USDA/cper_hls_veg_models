#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:7)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
# add_header_row(
#   top = TRUE,                # New header goes on top of existing header row
#   values = c("",     # Header values for each column below
#              "",
#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <-flextable(
error_combined,
col_keys = names(error_combined),
cwidth = 0.75,
cheight = 0.20,
defaults = list()
)
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
# add_header_row(
#   top = TRUE,                # New header goes on top of existing header row
#   values = c("",     # Header values for each column below
#              "",
#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)#%>%
#              "",
#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
# merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <-flextable(
error_combined,
col_keys = names(error_combined),
cwidth = 0.75,
cheight = 0.20,
defaults = list()
)
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:7,align = "center", part = "all")%>%
hline(part = "body", i = 2:7)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:9,align = "center", part = "all")%>%
hline(part = "body", i = 2:9)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
add_header_row(
top = TRUE,                # New header goes on top of existing header row
values = c("",     # Header values for each column below
"",
"",    # This will be the top-level header for this and two next columns
"",
"",
"Error Metrics",         # This will be the top-level header for this and two next columns
""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)%>%
# add_header_row(
#   top = TRUE,                # New header goes on top of existing header row
#   values = c("",     # Header values for each column below
#              "",
#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
ft1 <-flextable(
error_combined,
col_keys = names(error_combined),
cwidth = 0.75,
cheight = 0.20,
defaults = list()
)
ft1
ft1 <- ft1 %>%
merge_v(j="Ecosite")%>%
merge_v(j="Source")%>%
# valign(j=c("Ecosite"),valign = "top")%>%
# align(j=c("Ecosite"),align = "center",part = "body")%>%
align(j=1:8,align = "center", part = "all")%>%
hline(part = "body", i = 2:8)#%>%
#              "",
#              "",    # This will be the top-level header for this and two next columns
#              "",
#              "",
#              "Error Metrics",         # This will be the top-level header for this and two next columns
#              ""))%>%
# merge_at(i = 1, j = 4:8, part = "header")
# bg(bg = colourer,
#    j = "Ecosite",
#    part = "body")
ft1
save_as_docx(
"RAP vs iAPAR production predictions" = ft1,
path = "./tables/rap_vs_iAPAR.docx")
grazing_dates <- read.csv("../data/ground/grazing/CARM_ActualGrazingInfov3_2013-2023.csv")
apar<- read.csv("../data/training/iapar/cper_all_year_iapar_2014_2022.csv")
sos <- read.csv("../data/training/iapar/cper_sos_2014_2022.csv")
# cleaning sos
sos <- sos %>%
select(Year, Id, SOS_date)
#cleaning iapar
apar$Date <- ymd(apar$Date)
# apar <- iapar %>%
#   select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
#   separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
#   filter(!is.na(Date))
str(apar)
# cleaning grazing dates
grazing_dates$Pasture <- grazing_dates$PastureCode
grazing_dates$DateInPasture <- as.Date(grazing_dates$DateInPasture, format = "%m/%d/%Y")
grazing_dates$DateOutPasture <- as.Date(grazing_dates$DateOutPasture, format = "%m/%d/%Y")
grazing_dates$Year <- as.factor(grazing_dates$Year)
grazing_dates <- grazing_dates %>%
select(Year,DateInPasture,DateOutPasture,Pasture)
#merging and cleaning data
df_select <- df %>%
distinct(Year,Pasture,Graze_timing,Treatment,Id,Date)%>%
rename(SamplingDate = Date)
grazing_timing <- right_join(df_select, grazing_dates, by = c("Pasture","Year"))
#adding graze timing dates and factors to filtered data set
filtered_df2 <- merge(apar,grazing_timing, by = c("Id","Year"),all.x = TRUE)
#adding sos date to filtered data set
filtered_df2 <- merge(filtered_df2,sos, by = c("Id","Year"),all.x = TRUE)
# str(filtered_ndvi)
filtered_df2$Date <- ymd(filtered_df2$Date)
filtered_df3 <- filtered_df2 %>%
filter(Year == "2021") %>%
filter(!is.na(Treatment))%>%
# filter(!is.na(DateInPasture))%>%
ungroup()
filtered_df3$Date <- ymd(filtered_df3$Date)
filtered_df3$SOS_date <- ymd(filtered_df3$SOS_date)
filtered_df3$SamplingDate<- ymd(filtered_df3$SamplingDate)
str(filtered_df3)
# Split your data frame into a list of data frames for each Year/Pasture combination
df_list <- sample(split(filtered_df3, list(filtered_df3$Id, filtered_df3$Year)))
# Obtain the overall min and max values for NDVI_smooth_avg and APAR_modified
overall_min_ndvi <- min(sapply(df_list, function(filtered_df3) min(filtered_df3$NDVI_smooth_avg, na.rm = TRUE)))
overall_max_ndvi <- max(sapply(df_list, function(filtered_df3) max(filtered_df3$NDVI_smooth_avg, na.rm = TRUE)))
overall_min_apar <- min(sapply(df_list, function(filtered_df3) min(filtered_df3$APAR_adjusted, na.rm = TRUE)))
overall_max_apar <- max(sapply(df_list, function(filtered_df3) max(filtered_df3$APAR_adjusted, na.rm = TRUE)))
generate_plots <- function(df) {
# Create NDVI_smooth_avg plot
plot_ndvi <- ggplot(df, aes(x = Date, y = NDVI_smooth_avg)) +
geom_line() +
scale_color_brewer(palette = "Set1") +
scale_y_continuous(limits = c(overall_min_ndvi, overall_max_ndvi)) +  # standardize y-axis
theme_minimal() +
labs(title = paste(unique(df$Year), unique(df$Id), "smoothed NDVI", sep = " / "),
x = "Date",
y = "smoothed NDVI") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_vline(xintercept = df$DateInPasture, color = "green") +
geom_vline(xintercept = df$DateOutPasture, color = "red")+
mytheme()
# Create APAR plot
# Create a subset for the shaded region
shaded_region <- df[df$Date >= df$SOS_date & df$Date <= df$SamplingDate,]
#
# Create APAR plot
plot_apar <- ggplot(df, aes(x = Date, y = APAR_adjusted)) +
geom_line() +
geom_ribbon(data = shaded_region, aes(x = Date, ymin = overall_min_apar, ymax = APAR_adjusted), fill = "grey") +
geom_vline(xintercept = as.numeric(df$SOS_date), linetype = "dashed", color = "red") + # Add SOS_date line
geom_vline(xintercept = as.numeric(df$SamplingDate), linetype = "dashed", color = "blue") +
geom_vline(xintercept = df$DateInPasture, color = "green") +
geom_vline(xintercept = df$DateOutPasture, color = "red")+
scale_color_brewer(palette = "Set1") +
scale_y_continuous(limits = c(overall_min_apar, overall_max_apar)) +  # standardize y-axis # standardize y-axis
mytheme() +
labs(title = paste(unique(df$Year), unique(df$Id), "APAR", sep = " / "),
x = "Date",
y = "Adjusted APAR") +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
# Return list of plots
list(plot_ndvi, plot_apar)
}
invisible(lapply(df_list, function(filtered_df3) dim(filtered_df3)[1]))
# Generate plots for each Year/Pasture combination
plots_list <- lapply(df_list, generate_plots)
# Create a list to save grid of plots for each page
plot_pages <- list()
# Number of pages
num_pages <- ceiling(length(plots_list) / 4)
p1 <- plots_list["21N_P1.2021"][[1]][2]
p1
p2 <- plots_list["17S_P1.2021"][[1]][2]
p2
p3 <- plots_list["31E_P1.2021"][[1]][2]
p3
p4 <- plots_list["18S_P1.2021"][[1]][2]
p4
p1 <- plots_list["21N_P1.2021"][[1]]
p1
p2 <- plots_list["24W_P1.2021"][[1]]
p2
View(filtered_df3)
View(apar)
View(filtered_df3)
View(df_select)
apar <- iapar %>%
select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture,Year,Date)%>%
summarize(APAR_mean = mean(APAR_adjusted),NDVI_mean = mean(NDVI_smooth_avg))
apar2 <- apar %>%
select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture,Year,Date)%>%
summarize(APAR_mean = mean(APAR_adjusted),NDVI_mean = mean(NDVI_smooth_avg))
View(apar2)
apar <- apar %>%
select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture,Year,Date)%>%
summarize(APAR_mean = mean(APAR_adjusted),NDVI_mean = mean(NDVI_smooth_avg))
str(apar)
# cleaning grazing dates
grazing_dates$Pasture <- grazing_dates$PastureCode
grazing_dates$DateInPasture <- as.Date(grazing_dates$DateInPasture, format = "%m/%d/%Y")
grazing_dates$DateOutPasture <- as.Date(grazing_dates$DateOutPasture, format = "%m/%d/%Y")
grazing_dates$Year <- as.factor(grazing_dates$Year)
grazing_dates <- grazing_dates %>%
select(Year,DateInPasture,DateOutPasture,Pasture)
# cleaning grazing dates
grazing_dates$Pasture <- grazing_dates$PastureCode
grazing_dates$DateInPasture <- as.Date(grazing_dates$DateInPasture, format = "%m/%d/%Y")
grazing_dates$DateOutPasture <- as.Date(grazing_dates$DateOutPasture, format = "%m/%d/%Y")
grazing_dates$Year <- as.factor(grazing_dates$Year)
grazing_dates <- grazing_dates %>%
select(Year,DateInPasture,DateOutPasture,Pasture)
View(grazing_timing)
View(grazing_timing)
View(grazing_dates)
# graphing NDVI and grazing date ----
grazing_dates <- read.csv("../data/ground/grazing/CARM_ActualGrazingInfov3_2013-2023.csv")
# cleaning grazing dates
grazing_dates$Pasture <- grazing_dates$PastureCode
grazing_dates$DateInPasture <- as.Date(grazing_dates$DateInPasture, format = "%m/%d/%Y")
grazing_dates$DateOutPasture <- as.Date(grazing_dates$DateOutPasture, format = "%m/%d/%Y")
grazing_dates$Year <- as.factor(grazing_dates$Year)
grazing_dates <- grazing_dates %>%
select(Year,DateInPasture,DateOutPasture,Pasture)
#merging and cleaning data
df_select <- df %>%
distinct(Year,Pasture,Graze_timing,Treatment,Date)%>%
rename(SamplingDate = Date)
grazing_timing <- right_join(df_select, grazing_dates, by = c("Pasture","Year"))
#adding graze timing dates and factors to filtered data set
filtered_df2 <- merge(apar,grazing_timing, by = c("Pasture","Year"),all.x = TRUE)
#adding sos date to filtered data set
filtered_df2 <- merge(filtered_df2,sos, by = c("Pasture","Year"),all.x = TRUE)
View(sos)
# cleaning sos
sos <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")
# cleaning sos
sos <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(mean_SOS = mean(SOS_date))
sos <- read.csv("../data/training/iapar/cper_sos_2014_2022.csv")
# cleaning sos
sos2 <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(mean_SOS = mean(SOS_date))
sos2 <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(mean_SOS = mean(SOS_date))
# cleaning sos
sos$SOS_date <- ymd(sos$SOS_date)
sos2 <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(mean_SOS = mean(SOS_date))
View(sos2)
sos2 <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(SOS_date = mean(SOS_date))
sos <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(SOS_date = mean(SOS_date))
#cleaning iapar
apar$Date <- ymd(apar$Date)
apar <- apar %>%
select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture,Year,Date)%>%
summarize(APAR_mean = mean(APAR_adjusted),NDVI_mean = mean(NDVI_smooth_avg))
grazing_dates <- read.csv("../data/ground/grazing/CARM_ActualGrazingInfov3_2013-2023.csv")
apar<- read.csv("../data/training/iapar/cper_all_year_iapar_2014_2022.csv")
sos <- read.csv("../data/training/iapar/cper_sos_2014_2022.csv")
# cleaning sos
sos$SOS_date <- ymd(sos$SOS_date)
sos <- sos %>%
select(Year, Id, SOS_date)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture)%>%
summarize(SOS_date = mean(SOS_date))
#cleaning iapar
apar$Date <- ymd(apar$Date)
apar <- apar %>%
select(Id,Year,Date, APAR_adjusted,NDVI_smooth_avg)%>%
separate(Id, into = c("Pasture","Plot"), sep = "_")%>%
group_by(Pasture,Year,Date)%>%
summarize(APAR_mean = mean(APAR_adjusted),NDVI_mean = mean(NDVI_smooth_avg))
#   filter(!is.na(Date))
str(apar)
# cleaning grazing dates
grazing_dates$Pasture <- grazing_dates$PastureCode
grazing_dates$DateInPasture <- as.Date(grazing_dates$DateInPasture, format = "%m/%d/%Y")
grazing_dates$DateOutPasture <- as.Date(grazing_dates$DateOutPasture, format = "%m/%d/%Y")
grazing_dates$Year <- as.factor(grazing_dates$Year)
grazing_dates <- grazing_dates %>%
select(Year,DateInPasture,DateOutPasture,Pasture)
#merging and cleaning data
df_select <- df %>%
distinct(Year,Pasture,Graze_timing,Treatment,Date)%>%
rename(SamplingDate = Date)
grazing_timing <- right_join(df_select, grazing_dates, by = c("Pasture","Year"))
